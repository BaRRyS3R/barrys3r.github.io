// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
const ws = new WebSocket('ws://localhost:3000');

// Matter.js –º–æ–¥—É–ª–∏
const Engine = Matter.Engine;
const Render = Matter.Render;
const World = Matter.World;
const Bodies = Matter.Bodies;
const Body = Matter.Body;
const Events = Matter.Events;

// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let engine, render, canvas;
let myPlayerId = null;
let myPlayer = null;
let isShaman = false;
let players = {};
let playerBodies = {}; // –û—Ç–¥–µ–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è Matter.js —Ç–µ–ª
let playerStates = {}; // –ë—É—Ñ–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
let cheese = null;
let hole = null;
let platforms = [];
let keys = {};
let jumpCount = 0; // –°—á—ë—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä—ã–∂–∫–æ–≤
let canJump = false;
let touchingWall = false; // –î–ª—è wall-jump
let lastWallSide = null; // 'left' –∏–ª–∏ 'right'
let cheeseReached = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

// –ì—Ä–∞–Ω–∏—Ü—ã –º–∏—Ä–∞
let ground, leftWall, rightWall, ceiling;

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ)
let CANVAS_WIDTH = window.innerWidth;
let CANVAS_HEIGHT = window.innerHeight;
const PLAYER_SIZE = 20;
const MOVE_SPEED = 3;
const JUMP_FORCE = -10;
const DOUBLE_JUMP_FORCE = -9.5;
const WALL_JUMP_FORCE = -9;
const WALL_JUMP_PUSH = 4;
const MAX_JUMPS = 2;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ lag-compensation
const INTERPOLATION_DELAY = 100; // –º—Å –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
const BUFFER_SIZE = 10; // –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
const LERP_FACTOR = 0.3; // –°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ (0-1, —á–µ–º –±–æ–ª—å—à–µ - —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ)

// –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø–∏–Ω–≥–∞
let pingStartTime = 0;
let currentPing = 0;
let pingInterval = null;

// –ú–æ–±–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
let isMobile = false;
let mobileControls = {
    left: false,
    right: false,
    jump: false
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function init() {
    canvas = document.getElementById('gameCanvas');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
    detectMobileDevice();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas
    updateCanvasSize();
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –¥–≤–∏–∂–æ–∫
    engine = Engine.create();
    engine.world.gravity.y = 1;
    
    render = Render.create({
        canvas: canvas,
        engine: engine,
        options: {
            width: CANVAS_WIDTH,
            height: CANVAS_HEIGHT,
            wireframes: false,
            background: '#87CEEB'
        }
    });
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –º–∏—Ä–∞
    createWorldBounds();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
    Events.on(engine, 'collisionStart', onCollisionStart);
    Events.on(engine, 'collisionEnd', onCollisionEnd);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–∑–∏–∫–∏ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
    Events.on(engine, 'beforeUpdate', () => {
        if (myPlayer) {
            updatePlayer();
            checkCollisions();
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π
        updateOtherPlayers();
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∏–∂–æ–∫ –∏ —Ä–µ–Ω–¥–µ—Ä
    Engine.run(engine);
    Render.run(render);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventHandlers();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', handleResize);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ canvas
function updateCanvasSize() {
    CANVAS_WIDTH = window.innerWidth;
    CANVAS_HEIGHT = window.innerHeight;
    
    if (canvas) {
        canvas.width = CANVAS_WIDTH;
        canvas.height = CANVAS_HEIGHT;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
    const screenDimensions = document.getElementById('screen-dimensions');
    if (screenDimensions) {
        screenDimensions.textContent = `${CANVAS_WIDTH}x${CANVAS_HEIGHT}`;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –º–∏—Ä–∞
function createWorldBounds() {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (ground) {
        World.remove(engine.world, [ground, leftWall, rightWall, ceiling]);
    }
    
    ground = Bodies.rectangle(CANVAS_WIDTH / 2, CANVAS_HEIGHT - 10, CANVAS_WIDTH, 20, { 
        isStatic: true,
        render: { fillStyle: '#8B4513' },
        label: 'ground'
    });
    
    leftWall = Bodies.rectangle(10, CANVAS_HEIGHT / 2, 20, CANVAS_HEIGHT, { 
        isStatic: true,
        render: { fillStyle: '#8B4513' },
        label: 'leftWall'
    });
    
    rightWall = Bodies.rectangle(CANVAS_WIDTH - 10, CANVAS_HEIGHT / 2, 20, CANVAS_HEIGHT, { 
        isStatic: true,
        render: { fillStyle: '#8B4513' },
        label: 'rightWall'
    });
    
    ceiling = Bodies.rectangle(CANVAS_WIDTH / 2, 10, CANVAS_WIDTH, 20, { 
        isStatic: true,
        render: { fillStyle: '#8B4513' }
    });
    
    World.add(engine.world, [ground, leftWall, rightWall, ceiling]);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
function handleResize() {
    const oldWidth = CANVAS_WIDTH;
    const oldHeight = CANVAS_HEIGHT;
    
    updateCanvasSize();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ä–µ–Ω–¥–µ—Ä–∞
    render.canvas.width = CANVAS_WIDTH;
    render.canvas.height = CANVAS_HEIGHT;
    render.options.width = CANVAS_WIDTH;
    render.options.height = CANVAS_HEIGHT;
    render.bounds.max.x = CANVAS_WIDTH;
    render.bounds.max.y = CANVAS_HEIGHT;
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –º–∏—Ä–∞
    createWorldBounds();
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    const scaleX = CANVAS_WIDTH / oldWidth;
    const scaleY = CANVAS_HEIGHT / oldHeight;
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤
    for (let id in playerBodies) {
        const player = playerBodies[id];
        Body.setPosition(player, {
            x: player.position.x * scaleX,
            y: player.position.y * scaleY
        });
    }
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Å—ã—Ä
    if (cheese) {
        Body.setPosition(cheese, {
            x: cheese.position.x * scaleX,
            y: cheese.position.y * scaleY
        });
    }
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –Ω–æ—Ä–∫—É
    if (hole) {
        Body.setPosition(hole, {
            x: hole.position.x * scaleX,
            y: hole.position.y * scaleY
        });
    }
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    platforms.forEach(platform => {
        Body.setPosition(platform, {
            x: platform.position.x * scaleX,
            y: platform.position.y * scaleY
        });
    });
    
    // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ—Å–ª–µ —Ä–µ—Å–∞–π–∑–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∞
    for (let id in playerStates) {
        playerStates[id].buffer = [];
    }
    
    console.log('üìê –†–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω—ë–Ω:', CANVAS_WIDTH, 'x', CANVAS_HEIGHT);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π
function onCollisionStart(event) {
    const pairs = event.pairs;
    for (let i = 0; i < pairs.length; i++) {
        const pair = pairs[i];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å–∞–Ω–∏—è –∑–µ–º–ª–∏/–ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è –ø—Ä—ã–∂–∫–∞
        if (myPlayer && (pair.bodyA === myPlayer || pair.bodyB === myPlayer)) {
            const other = pair.bodyA === myPlayer ? pair.bodyB : pair.bodyA;
            
            // –ï—Å–ª–∏ –∫–∞—Å–∞–µ–º—Å—è —á–µ–≥–æ-—Ç–æ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ
            if (other.isStatic) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã —Å–≤–µ—Ä—Ö—É –æ–±—ä–µ–∫—Ç–∞ (–∫–∞—Å–∞–Ω–∏–µ —Å–Ω–∏–∑—É)
                if (myPlayer.position.y < other.position.y - 10) {
                    canJump = true;
                    jumpCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä—ã–∂–∫–æ–≤
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å–∞–Ω–∏—è —Å—Ç–µ–Ω—ã –¥–ª—è wall-jump
                if (other.label === 'leftWall' || other.label === 'rightWall') {
                    touchingWall = true;
                    lastWallSide = other.label === 'leftWall' ? 'left' : 'right';
                    jumpCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä—ã–∂–∫–∏ –ø—Ä–∏ –∫–∞—Å–∞–Ω–∏–∏ —Å—Ç–µ–Ω—ã
                    console.log('üßó –ö–∞—Å–∞–Ω–∏–µ —Å—Ç–µ–Ω—ã:', lastWallSide, '- –ø—Ä—ã–∂–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
                }
                
                // –ö–∞—Å–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Ç–æ–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä—ã–∂–∫–∏
                if (other.label === 'platform' && myPlayer.position.y < other.position.y - 5) {
                    jumpCount = 0;
                }
            }
        }
    }
}

function onCollisionEnd(event) {
    const pairs = event.pairs;
    for (let i = 0; i < pairs.length; i++) {
        const pair = pairs[i];
        
        if (myPlayer && (pair.bodyA === myPlayer || pair.bodyB === myPlayer)) {
            const other = pair.bodyA === myPlayer ? pair.bodyB : pair.bodyA;
            
            // –ü–µ—Ä–µ—Å—Ç–∞–ª–∏ –∫–∞—Å–∞—Ç—å—Å—è —Å—Ç–µ–Ω—ã
            if (other.label === 'leftWall' || other.label === 'rightWall') {
                touchingWall = false;
                lastWallSide = null;
            }
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
function createPlayer(playerData) {
    const player = Bodies.circle(playerData.x, playerData.y, PLAYER_SIZE, {
        friction: 0.5,
        restitution: 0.1,
        density: 0.001,
        frictionAir: 0.01,
        render: {
            fillStyle: playerData.isShaman ? '#FFD700' : '#808080'
        }
    });
    
    player.playerId = playerData.id;
    player.hasCheese = playerData.hasCheese || false;
    player.isShaman = playerData.isShaman || false;
    World.add(engine.world, player);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    if (playerData.id !== myPlayerId) {
        playerStates[playerData.id] = {
            buffer: [],
            targetX: playerData.x,
            targetY: playerData.y,
            targetVx: 0,
            targetVy: 0
        };
    }
    
    return player;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –∏–≥—Ä–æ–∫–∞
function addPlayerState(playerId, x, y, vx, vy) {
    if (!playerStates[playerId]) {
        playerStates[playerId] = {
            buffer: [],
            targetX: x,
            targetY: y,
            targetVx: vx,
            targetVy: vy
        };
    }
    
    const state = {
        x: x,
        y: y,
        vx: vx,
        vy: vy,
        timestamp: Date.now()
    };
    
    playerStates[playerId].buffer.push(state);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
    if (playerStates[playerId].buffer.length > BUFFER_SIZE) {
        playerStates[playerId].buffer.shift();
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
function getInterpolatedPosition(playerId) {
    const state = playerStates[playerId];
    if (!state || state.buffer.length === 0) {
        return null;
    }
    
    const now = Date.now();
    const renderTime = now - INTERPOLATION_DELAY;
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    let before = null;
    let after = null;
    
    for (let i = 0; i < state.buffer.length - 1; i++) {
        if (state.buffer[i].timestamp <= renderTime && state.buffer[i + 1].timestamp >= renderTime) {
            before = state.buffer[i];
            after = state.buffer[i + 1];
            break;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ
    if (!before || !after) {
        const latest = state.buffer[state.buffer.length - 1];
        return {
            x: latest.x,
            y: latest.y,
            vx: latest.vx,
            vy: latest.vy
        };
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    const total = after.timestamp - before.timestamp;
    const elapsed = renderTime - before.timestamp;
    const t = total > 0 ? elapsed / total : 0;
    
    // –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
    return {
        x: lerp(before.x, after.x, t),
        y: lerp(before.y, after.y, t),
        vx: lerp(before.vx, after.vx, t),
        vy: lerp(before.vy, after.vy, t)
    };
}

// –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
function lerp(start, end, t) {
    return start + (end - start) * t;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π
function updateOtherPlayers() {
    for (let id in playerBodies) {
        if (id === myPlayerId) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        
        const body = playerBodies[id];
        const state = playerStates[id];
        
        if (!body || !state) continue;
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        const interpolated = getInterpolatedPosition(id);
        
        if (interpolated) {
            // –ü–ª–∞–≤–Ω–æ –¥–≤–∏–≥–∞–µ–º –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            const currentX = body.position.x;
            const currentY = body.position.y;
            
            const newX = lerp(currentX, interpolated.x, LERP_FACTOR);
            const newY = lerp(currentY, interpolated.y, LERP_FACTOR);
            
            Body.setPosition(body, { x: newX, y: newY });
            Body.setVelocity(body, { x: interpolated.vx, y: interpolated.vy });
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—ã—Ä–∞
function createCheese(x, y) {
    if (cheese) {
        World.remove(engine.world, cheese);
    }
    
    cheese = Bodies.circle(x, y, 15, {
        isStatic: true,
        isSensor: true,
        render: {
            fillStyle: '#FFD700',
            strokeStyle: '#FFA500',
            lineWidth: 3
        }
    });
    
    cheese.label = 'cheese';
    World.add(engine.world, cheese);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ—Ä–∫–∏
function createHole(x, y) {
    if (hole) {
        World.remove(engine.world, hole);
    }
    
    hole = Bodies.circle(x, y, 30, {
        isStatic: true,
        isSensor: true,
        render: {
            fillStyle: '#4a2511',
            strokeStyle: '#2d1506',
            lineWidth: 3
        }
    });
    
    hole.label = 'hole';
    World.add(engine.world, hole);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
function createPlatform(platformData) {
    const platform = Bodies.rectangle(
        platformData.x,
        platformData.y,
        platformData.width,
        platformData.height,
        {
            isStatic: true,
            angle: platformData.angle || 0,
            render: { fillStyle: '#8B4513' },
            label: 'platform'
        }
    );
    
    platform.platformId = platformData.id;
    World.add(engine.world, platform);
    platforms.push(platform);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
function updatePlayer() {
    if (!myPlayer) return;
    
    let velocityX = myPlayer.velocity.x;
    let velocityY = myPlayer.velocity.y;
    
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
    if (keys['ArrowLeft'] || keys['a'] || keys['A']) {
        velocityX = -MOVE_SPEED;
    } else if (keys['ArrowRight'] || keys['d'] || keys['D']) {
        velocityX = MOVE_SPEED;
    } else {
        // –ü–ª–∞–≤–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
        velocityX *= 0.9;
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
    Body.setVelocity(myPlayer, { x: velocityX, y: velocityY });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–∞—â–µ –¥–ª—è –ª—É—á—à–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if (Math.random() < 0.6 && ws.readyState === WebSocket.OPEN) { // –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 0.3 –¥–æ 0.6
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ –±–∞–∑–æ–≤–æ–º—É —Ä–∞–∑–º–µ—Ä—É 800x500 –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        const baseX = (myPlayer.position.x / CANVAS_WIDTH) * 800;
        const baseY = (myPlayer.position.y / CANVAS_HEIGHT) * 500;
        
        ws.send(JSON.stringify({
            type: 'move',
            x: baseX,
            y: baseY,
            vx: myPlayer.velocity.x,
            vy: myPlayer.velocity.y,
            timestamp: Date.now() // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        }));
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
function checkCollisions() {
    if (!myPlayer) return;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Å—ã—Ä–æ–º
    if (!myPlayer.hasCheese && cheese) {
        const distToCheese = Math.hypot(
            myPlayer.position.x - cheese.position.x,
            myPlayer.position.y - cheese.position.y
        );
        
        if (distToCheese < PLAYER_SIZE + 15) {
            myPlayer.hasCheese = true;
            myPlayer.render.fillStyle = myPlayer.isShaman ? '#FFD700' : '#FFA500';
            cheeseReached = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –Ω–æ—Ä–∫–∏
            
            ws.send(JSON.stringify({ type: 'collectCheese' }));
            console.log('üßÄ –°—ã—Ä —Å–æ–±—Ä–∞–Ω!');
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–æ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ —Å —Å—ã—Ä–æ–º)
    if (myPlayer.hasCheese && hole && !cheeseReached) {
        const distToHole = Math.hypot(
            myPlayer.position.x - hole.position.x,
            myPlayer.position.y - hole.position.y
        );
        
        console.log('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–æ—Ä–∫–∏:', distToHole);
        
        if (distToHole < PLAYER_SIZE + 30) {
            cheeseReached = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            console.log('üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –Ω–æ—Ä–∫–∞! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥—É...');
            
            ws.send(JSON.stringify({ type: 'reachHole' }));
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function setupEventHandlers() {
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    window.addEventListener('keydown', (e) => {
        if (keys[e.key]) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è
        
        keys[e.key] = true;
        
        // –ü—Ä—ã–∂–æ–∫
        if ((e.key === ' ' || e.key === 'ArrowUp' || e.key === 'w' || e.key === 'W') && myPlayer) {
            performJump();
        }
        
        e.preventDefault();
    });
    
    window.addEventListener('keyup', (e) => {
        keys[e.key] = false;
    });
    
    // –ú—ã—à—å (–¥–ª—è —à–∞–º–∞–Ω–∞) - —Ç–æ–ª—å–∫–æ –Ω–∞ desktop
    if (!isMobile) {
        canvas.addEventListener('click', (e) => {
            if (!isShaman) return;
            
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ –±–∞–∑–æ–≤–æ–º—É —Ä–∞–∑–º–µ—Ä—É 800x500 –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
            const baseX = (x / CANVAS_WIDTH) * 800;
            const baseY = (y / CANVAS_HEIGHT) * 500;
            
            ws.send(JSON.stringify({
                type: 'buildPlatform',
                x: baseX,
                y: baseY,
                width: 100,
                height: 20,
                angle: 0
            }));
            
            console.log('üî® –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞', baseX, baseY);
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
ws.onopen = () => {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É!');
    startPingMeasurement(); // –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ—Ä—è—Ç—å –ø–∏–Ω–≥
};

ws.onmessage = (event) => {
    const data = JSON.parse(event.data);
    
    switch(data.type) {
        case 'init':
            myPlayerId = data.playerId;
            isShaman = data.gameState.shamanId === myPlayerId;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            document.getElementById('player-id').textContent = myPlayerId.substr(0, 5);
            document.getElementById('player-role').textContent = isShaman ? '‚≠ê –®–ê–ú–ê–ù' : '–ú—ã—à—å';
            
            // –°–æ–∑–¥–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            for (let id in data.gameState.players) {
                const playerData = data.gameState.players[id];
                // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ 800x500 –∫ —Ç–µ–∫—É—â–µ–º—É
                const scaledData = {
                    ...playerData,
                    x: (playerData.x / 800) * CANVAS_WIDTH,
                    y: (playerData.y / 500) * CANVAS_HEIGHT
                };
                const player = createPlayer(scaledData);
                playerBodies[id] = player;
                players[id] = playerData;
                
                if (id === myPlayerId) {
                    myPlayer = player;
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º —Å—ã—Ä –∏ –Ω–æ—Ä–∫—É
            if (data.gameState.cheese) {
                const scaledX = (data.gameState.cheese.x / 800) * CANVAS_WIDTH;
                const scaledY = (data.gameState.cheese.y / 500) * CANVAS_HEIGHT;
                createCheese(scaledX, scaledY);
            }
            if (data.gameState.hole) {
                const scaledX = (data.gameState.hole.x / 800) * CANVAS_WIDTH;
                const scaledY = (data.gameState.hole.y / 500) * CANVAS_HEIGHT;
                createHole(scaledX, scaledY);
            }
            
            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            data.gameState.platforms.forEach(p => {
                const scaledPlatform = {
                    ...p,
                    x: (p.x / 800) * CANVAS_WIDTH,
                    y: (p.y / 500) * CANVAS_HEIGHT,
                    width: (p.width / 800) * CANVAS_WIDTH,
                    height: (p.height / 500) * CANVAS_HEIGHT
                };
                createPlatform(scaledPlatform);
            });
            
            updatePlayerCount();
            console.log('üéÆ –ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤:', Object.keys(players).length);
            break;
            
        case 'playerJoined':
            console.log('üëã –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:', data.player.id);
            const scaledNewPlayer = {
                ...data.player,
                x: (data.player.x / 800) * CANVAS_WIDTH,
                y: (data.player.y / 500) * CANVAS_HEIGHT
            };
            const newPlayer = createPlayer(scaledNewPlayer);
            playerBodies[data.player.id] = newPlayer;
            players[data.player.id] = data.player;
            updatePlayerCount();
            break;
            
        case 'playerLeft':
            console.log('üëã –ò–≥—Ä–æ–∫ –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É:', data.playerId);
            if (playerBodies[data.playerId]) {
                World.remove(engine.world, playerBodies[data.playerId]);
                delete playerBodies[data.playerId];
                delete players[data.playerId];
                delete playerStates[data.playerId]; // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
            }
            updatePlayerCount();
            break;
            
        case 'playerMove':
            if (playerBodies[data.playerId] && data.playerId !== myPlayerId) {
                const scaledX = (data.x / 800) * CANVAS_WIDTH;
                const scaledY = (data.y / 500) * CANVAS_HEIGHT;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –±—É—Ñ–µ—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
                addPlayerState(data.playerId, scaledX, scaledY, data.vx, data.vy);
            }
            break;
            
        case 'cheeseCollected':
            console.log('üßÄ –ò–≥—Ä–æ–∫', data.playerId.substr(0, 5), '—Å–æ–±—Ä–∞–ª —Å—ã—Ä!');
            if (cheese) {
                World.remove(engine.world, cheese);
                cheese = null;
            }
            if (playerBodies[data.playerId]) {
                playerBodies[data.playerId].hasCheese = true;
                const isPlayerShaman = players[data.playerId]?.isShaman;
                playerBodies[data.playerId].render.fillStyle = isPlayerShaman ? '#FFD700' : '#FFA500';
            }
            break;
            
        case 'playerWon':
            console.log('üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:', data.playerId);
            showMessage(`üéâ –ò–≥—Ä–æ–∫ ${data.playerId.substr(0, 5)} –ø–æ–±–µ–¥–∏–ª!`);
            break;
            
        case 'roundReset':
            console.log('üîÑ –°–±—Ä–æ—Å —Ä–∞—É–Ω–¥–∞');
            showMessage('üîÑ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥!');
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
            cheeseReached = false;
            jumpCount = 0;
            canJump = false;
            touchingWall = false;
            lastWallSide = null;
            
            // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            for (let id in playerStates) {
                playerStates[id].buffer = [];
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—ã—Ä –∏ –Ω–æ—Ä–∫—É
            if (data.gameState.cheese) {
                const scaledX = (data.gameState.cheese.x / 800) * CANVAS_WIDTH;
                const scaledY = (data.gameState.cheese.y / 500) * CANVAS_HEIGHT;
                createCheese(scaledX, scaledY);
            }
            if (data.gameState.hole) {
                const scaledX = (data.gameState.hole.x / 800) * CANVAS_WIDTH;
                const scaledY = (data.gameState.hole.y / 500) * CANVAS_HEIGHT;
                createHole(scaledX, scaledY);
            }
            
            // –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            platforms.forEach(p => World.remove(engine.world, p));
            platforms = [];
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
            for (let id in playerBodies) {
                const scaledX = (100 / 800) * CANVAS_WIDTH;
                const scaledY = (400 / 500) * CANVAS_HEIGHT;
                Body.setPosition(playerBodies[id], { x: scaledX, y: scaledY });
                Body.setVelocity(playerBodies[id], { x: 0, y: 0 });
                playerBodies[id].hasCheese = false;
                const isPlayerShaman = players[id]?.isShaman;
                playerBodies[id].render.fillStyle = isPlayerShaman ? '#FFD700' : '#808080';
            }
            break;
            
        case 'platformBuilt':
            const scaledPlatform = {
                ...data.platform,
                x: (data.platform.x / 800) * CANVAS_WIDTH,
                y: (data.platform.y / 500) * CANVAS_HEIGHT,
                width: (data.platform.width / 800) * CANVAS_WIDTH,
                height: (data.platform.height / 500) * CANVAS_HEIGHT
            };
            createPlatform(scaledPlatform);
            console.log('üî® –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞');
            break;
            
        case 'newShaman':
            console.log('‚≠ê –ù–æ–≤—ã–π —à–∞–º–∞–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω:', data.shamanId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–º–∞–Ω–µ
            if (data.shamanId === myPlayerId) {
                isShaman = true;
                document.getElementById('player-role').textContent = '‚≠ê –®–ê–ú–ê–ù';
                if (myPlayer) {
                    myPlayer.render.fillStyle = '#FFD700';
                    myPlayer.isShaman = true;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –Ω–æ–≤–æ–≥–æ —à–∞–º–∞–Ω–∞
            if (playerBodies[data.shamanId]) {
                playerBodies[data.shamanId].render.fillStyle = '#FFD700';
                playerBodies[data.shamanId].isShaman = true;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
            if (players[data.shamanId]) {
                players[data.shamanId].isShaman = true;
            }
            break;
            
        case 'pong':
            // –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - –≤—ã—á–∏—Å–ª—è–µ–º –ø–∏–Ω–≥
            currentPing = Date.now() - pingStartTime;
            updatePingDisplay();
            break;
    }
};

ws.onclose = () => {
    console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    showMessage('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ!');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–∏–Ω–≥–∞
    if (pingInterval) {
        clearInterval(pingInterval);
        pingInterval = null;
    }
};

ws.onerror = (error) => {
    console.error('‚ö†Ô∏è WebSocket –æ—à–∏–±–∫–∞:', error);
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showMessage(text) {
    const msg = document.getElementById('game-message');
    msg.textContent = text;
    msg.classList.add('show');
    
    setTimeout(() => {
        msg.classList.remove('show');
    }, 3000);
}

function updatePlayerCount() {
    document.getElementById('player-count').textContent = Object.keys(players).length;
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', init);

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function detectMobileDevice() {
    const mobileCheck = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    const touchCheck = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    
    isMobile = mobileCheck || touchCheck;
    
    if (isMobile) {
        console.log('üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –≤–∫–ª—é—á–∞–µ–º —Å–µ–Ω—Å–æ—Ä–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
        const mobileControlsDiv = document.getElementById('mobile-controls');
        if (mobileControlsDiv) {
            mobileControlsDiv.classList.add('active');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        const instructions = document.getElementById('instructions');
        if (instructions) {
            instructions.innerHTML = `
                <p><strong>üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!</strong></p>
                <p><strong>‚ö° Lag-compensation</strong></p>
                <p>‚óÑ ‚ñ∫ - –¥–≤–∏–∂–µ–Ω–∏–µ</p>
                <p>‚¨Ü - –ø—Ä—ã–∂–æ–∫ (–¥–≤–æ–π–Ω–æ–π!)</p>
                <p>üßó Wall-jump —Ä–∞–±–æ—Ç–∞–µ—Ç!</p>
                <p><strong>–®–∞–º–∞–Ω:</strong> —Ç–∞–ø - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞</p>
            `;
        }
        
        setupMobileControls();
    } else {
        console.log('üñ•Ô∏è Desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function setupMobileControls() {
    const btnLeft = document.getElementById('btn-left');
    const btnRight = document.getElementById('btn-right');
    const btnJump = document.getElementById('btn-jump');
    
    // –ö–Ω–æ–ø–∫–∞ –≤–ª–µ–≤–æ
    if (btnLeft) {
        btnLeft.addEventListener('touchstart', (e) => {
            e.preventDefault();
            mobileControls.left = true;
            keys['ArrowLeft'] = true;
            btnLeft.classList.add('pressed');
        });
        
        btnLeft.addEventListener('touchend', (e) => {
            e.preventDefault();
            mobileControls.left = false;
            keys['ArrowLeft'] = false;
            btnLeft.classList.remove('pressed');
        });
        
        btnLeft.addEventListener('touchcancel', (e) => {
            e.preventDefault();
            mobileControls.left = false;
            keys['ArrowLeft'] = false;
            btnLeft.classList.remove('pressed');
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –≤–ø—Ä–∞–≤–æ
    if (btnRight) {
        btnRight.addEventListener('touchstart', (e) => {
            e.preventDefault();
            mobileControls.right = true;
            keys['ArrowRight'] = true;
            btnRight.classList.add('pressed');
        });
        
        btnRight.addEventListener('touchend', (e) => {
            e.preventDefault();
            mobileControls.right = false;
            keys['ArrowRight'] = false;
            btnRight.classList.remove('pressed');
        });
        
        btnRight.addEventListener('touchcancel', (e) => {
            e.preventDefault();
            mobileControls.right = false;
            keys['ArrowRight'] = false;
            btnRight.classList.remove('pressed');
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –ø—Ä—ã–∂–∫–∞
    if (btnJump) {
        btnJump.addEventListener('touchstart', (e) => {
            e.preventDefault();
            
            if (!mobileControls.jump && myPlayer) {
                mobileControls.jump = true;
                btnJump.classList.add('pressed');
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—ã–∂–æ–∫
                performJump();
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä—ã–∂–∫–æ–º
                setTimeout(() => {
                    mobileControls.jump = false;
                }, 150);
            }
        });
        
        btnJump.addEventListener('touchend', (e) => {
            e.preventDefault();
            btnJump.classList.remove('pressed');
        });
        
        btnJump.addEventListener('touchcancel', (e) => {
            e.preventDefault();
            btnJump.classList.remove('pressed');
        });
    }
    
    // Touch –¥–ª—è —à–∞–º–∞–Ω–∞ (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º)
    canvas.addEventListener('touchstart', handleTouchBuild);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—ã–∂–∫–∞ (–≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
function performJump() {
    if (!myPlayer) return;
    
    let jumped = false;
    
    // –û–±—ã—á–Ω—ã–π –ø—Ä—ã–∂–æ–∫ —Å –∑–µ–º–ª–∏
    if (canJump) {
        Body.setVelocity(myPlayer, { 
            x: myPlayer.velocity.x, 
            y: JUMP_FORCE 
        });
        canJump = false;
        jumpCount = 1;
        jumped = true;
        console.log('‚¨ÜÔ∏è –ü—Ä—ã–∂–æ–∫ —Å –∑–µ–º–ª–∏! (1/' + MAX_JUMPS + ')');
    }
    // –î–≤–æ–π–Ω–æ–π –ø—Ä—ã–∂–æ–∫ –≤ –≤–æ–∑–¥—É—Ö–µ
    else if (jumpCount < MAX_JUMPS && !touchingWall) {
        Body.setVelocity(myPlayer, { 
            x: myPlayer.velocity.x, 
            y: DOUBLE_JUMP_FORCE 
        });
        jumpCount++;
        jumped = true;
        console.log('‚¨ÜÔ∏è‚¨ÜÔ∏è –î–≤–æ–π–Ω–æ–π –ø—Ä—ã–∂–æ–∫ –≤ –≤–æ–∑–¥—É—Ö–µ! (' + jumpCount + '/' + MAX_JUMPS + ')');
    }
    // Wall-jump –æ—Ç —Å—Ç–µ–Ω—ã
    else if (touchingWall && lastWallSide) {
        const pushDirection = lastWallSide === 'left' ? WALL_JUMP_PUSH : -WALL_JUMP_PUSH;
        
        Body.setVelocity(myPlayer, { 
            x: pushDirection, 
            y: WALL_JUMP_FORCE 
        });
        
        jumpCount = 1;
        touchingWall = false;
        lastWallSide = null;
        jumped = true;
        console.log('üßó Wall-jump! –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä—ã–∂–∫–æ–≤:', MAX_JUMPS - jumpCount);
    }
    
    // –í–∏–±—Ä–∞—Ü–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø—Ä—ã–∂–∫–µ
    if (jumped && isMobile && navigator.vibrate) {
        navigator.vibrate(50); // –ö–æ—Ä–æ—Ç–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è 50–º—Å
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ touch –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º
function handleTouchBuild(e) {
    if (!isShaman) return;
    
    e.preventDefault();
    
    const touch = e.touches[0];
    const rect = canvas.getBoundingClientRect();
    const x = touch.clientX - rect.left;
    const y = touch.clientY - rect.top;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–ø –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const btnJump = document.getElementById('btn-jump');
    const btnLeft = document.getElementById('btn-left');
    const btnRight = document.getElementById('btn-right');
    
    const jumpRect = btnJump ? btnJump.getBoundingClientRect() : null;
    const leftRect = btnLeft ? btnLeft.getBoundingClientRect() : null;
    const rightRect = btnRight ? btnRight.getBoundingClientRect() : null;
    
    const touchX = touch.clientX;
    const touchY = touch.clientY;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –∫–Ω–æ–ø–∫–∏
    const hitButton = 
        (jumpRect && touchX >= jumpRect.left && touchX <= jumpRect.right && touchY >= jumpRect.top && touchY <= jumpRect.bottom) ||
        (leftRect && touchX >= leftRect.left && touchX <= leftRect.right && touchY >= leftRect.top && touchY <= leftRect.bottom) ||
        (rightRect && touchX >= rightRect.left && touchX <= rightRect.right && touchY >= rightRect.top && touchY <= rightRect.bottom);
    
    if (hitButton) return;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ –±–∞–∑–æ–≤–æ–º—É —Ä–∞–∑–º–µ—Ä—É 800x500 –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
    const baseX = (x / CANVAS_WIDTH) * 800;
    const baseY = (y / CANVAS_HEIGHT) * 500;
    
    ws.send(JSON.stringify({
        type: 'buildPlatform',
        x: baseX,
        y: baseY,
        width: 100,
        height: 20,
        angle: 0
    }));
    
    console.log('üî® –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞', baseX, baseY);
}

// –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø–∏–Ω–≥–∞
function startPingMeasurement() {
    pingInterval = setInterval(() => {
        if (ws.readyState === WebSocket.OPEN) {
            pingStartTime = Date.now();
            ws.send(JSON.stringify({ type: 'ping' }));
        }
    }, 2000); // –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
}

function updatePingDisplay() {
    const pingElement = document.getElementById('ping-value');
    if (pingElement) {
        pingElement.textContent = currentPing;
        
        // –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø–∏–Ω–≥–∞
        const pingInfo = document.getElementById('ping-info');
        if (currentPing < 50) {
            pingInfo.style.color = '#00ff00'; // –ó–µ–ª—ë–Ω—ã–π - –æ—Ç–ª–∏—á–Ω—ã–π –ø–∏–Ω–≥
        } else if (currentPing < 100) {
            pingInfo.style.color = '#ffff00'; // –ñ—ë–ª—Ç—ã–π - —Ö–æ—Ä–æ—à–∏–π –ø–∏–Ω–≥
        } else if (currentPing < 200) {
            pingInfo.style.color = '#ff9900'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π - —Å—Ä–µ–¥–Ω–∏–π –ø–∏–Ω–≥
        } else {
            pingInfo.style.color = '#ff0000'; // –ö—Ä–∞—Å–Ω—ã–π - –ø–ª–æ—Ö–æ–π –ø–∏–Ω–≥
        }
    }
}